package com.theicecreambear.player;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import com.theicecreambear.gameobject.GameObject;
import com.theicecreambear.handlers.InputHandler;
import com.theicecreambear.interfaces.Drawable;
import com.theicecreambear.interfaces.Updateable;
import com.theicecreambear.item.Item;
import com.theicecreambear.refrence.Refrence;

public class Player extends GameObject implements Drawable, Updateable {
	
	public BufferedImage[] playerWalkingSprites;
	
	private State playerState;
	private BufferedImage currentSprite;
	
	private OverworldPosition owp;
	private WorldPosition wp;
	private InputHandler handler;
	public boolean male;

	public Player(OverworldPosition owp, WorldPosition wp, ArrayList<Item> bag, boolean male, Component c) {
		this.owp = owp;
		this.wp = wp;
		this.bag = bag;
		this.male = male;
		this.handler = new InputHandler(c);
		this.playerState = State.DOWNWALK;
		this.initPlayerWalkingSprites();
		this.currentSprite = playerWalkingSprites[1];
	}
	
	public Player(OverworldPosition owp, WorldPosition wp, Component c) {
		this(owp, wp, new ArrayList<Item>(), true, c);
	}
	
	public Player(boolean male, Component c) {
		this(new OverworldPosition(), new WorldPosition(), new ArrayList<Item>(), male, c);
	}
	
	// TODO FIX inventory
	ArrayList<Item> bag;

	@Override
	public void update(double deltaTime) {
		
		// TODO
		if(handler.isKeyDown(KeyEvent.VK_RIGHT) || handler.isKeyDown(KeyEvent.VK_D)) {
			wp.x++;
			this.playerState.direction = (this.playerState.isRunning) ? "rightR" : "rightW";
			this.playerState.nextFoot();
			if (this.playerState.foot()) {
				switch (this.playerState.direction) {
					case "rightR": {
						// NOOP
					}
					case "leftR": {
						// NOOP
					}
					case "upR": {
						// NOOP
					}
					case "downR": {
						// NOOP
					}
					case "rightW" : {
					
					}
					case "leftW": {
					
					}
					case "upW": {
					
					}
					case "downW": {
					
					}
				}
			} else {
				switch (this.playerState.direction) {
					case "rightR": {
						// NOOP
					}
					case "leftR": {
						// NOOP
					}
					case "upR": {
						// NOOP
					}
					case "downR": {
						// NOOP
					}
					case "rightW" : {
					
					}
					case "leftW": {
						
					}
					case "upW": {
						
					}
					case "downW": {
						
					}
				}
			}
		}
		
		if(handler.isKeyDown(KeyEvent.VK_LEFT) || handler.isKeyDown(KeyEvent.VK_A)) {
			wp.x--;
			this.playerState.direction = (this.playerState.isRunning) ? "leftR" : "leftW";
			this.playerState.nextFoot();
		}
		
		if(handler.isKeyDown(KeyEvent.VK_UP) || handler.isKeyDown(KeyEvent.VK_W)) {
			wp.y++;
			this.playerState.direction = (this.playerState.isRunning) ? "upR" : "upW";
			this.playerState.nextFoot();
		}
		
		if(handler.isKeyDown(KeyEvent.VK_DOWN) || handler.isKeyDown(KeyEvent.VK_S)) {
			wp.y--;
			this.playerState.direction = (this.playerState.isRunning) ? "downR" : "downW";
			this.playerState.nextFoot();
		}
	}
	
	@Override
	public void draw() {
		// TODO, draw current image
	}
	
	private void initPlayerWalkingSprites() {
		BufferedImage[] array = new BufferedImage[12];
		try {
			array[0] = ImageIO.read(new File(Refrence.installDir + "player_down_left_walk.png"));
			array[1] = ImageIO.read(new File(Refrence.installDir + "player_down_no_walk.png"));
			array[2] = ImageIO.read(new File(Refrence.installDir + "player_down_right_walk.png"));
			array[3] = ImageIO.read(new File(Refrence.installDir + "player_left_back_walk.png"));
			array[4] = ImageIO.read(new File(Refrence.installDir + "player_left_front_walk.png"));
			array[5] = ImageIO.read(new File(Refrence.installDir + "player_left_no_walk.png"));
			array[6] = ImageIO.read(new File(Refrence.installDir + "player_right_back_walk.png"));
			array[7] = ImageIO.read(new File(Refrence.installDir + "player_right_front_walk.png"));
			array[8] = ImageIO.read(new File(Refrence.installDir + "player_right_no_walk.png"));
			array[9] = ImageIO.read(new File(Refrence.installDir + "player_up_left_walk.png"));
			array[10] = ImageIO.read(new File(Refrence.installDir + "player_up_no_walk.png"));
			array[11] = ImageIO.read(new File(Refrence.installDir + "player_up_right_walk.png"));
		} catch (IOException e) {
			System.err.println("The Files dont exist");
			e.printStackTrace();
		}
		playerWalkingSprites = array;
	}
	
	public enum State {
		RIGHTRUN("rightR", true, 1),
		LEFTRUN("leftR", true, 1),
		DOWNRUN("downR", true, 1),
		UPRUN("upR", true, 1),
		RIGHTWALK("rightW", false, 1),
		LEFTWALK("leftW", false, 1),
		DOWNWALK("downW", false, 1),
		UPWALK("upW", false, 1),
		NOTMOVING("none", false, 1);
		
		private static final Map<String, State> NAME_STATE_MAP = new HashMap<String, State>();
		private String direction;
		private boolean isRunning;
		private int foot; // 0 left, 1 no, 2 right
		State(String direction, boolean running, int foot) {
			this.direction = direction;
			this.isRunning = running;
			this.foot = foot;
		}
		
		public String getDirection() {
			return this.direction;
		}
		
		public boolean isPlayerRunning() {
			return isRunning;
		}
		
		public int getfoot() {
			return foot;
		}
		
		public void nextFoot() {
			if (foot >= 0 && foot != 2) {
				foot++;
			} else if (foot <= 2 && foot != 0) {
				foot--;
			}
		}
		
		public static State getState(String direction) {
			return (State)NAME_STATE_MAP.get(direction);
		}
		
		static {
			for (State state : values()) {
				if (NAME_STATE_MAP.containsKey(state.getDirection())) {
					throw new Error("Clash in State Name pools! Cannot insert " + state);
				}
				NAME_STATE_MAP.put(state.getDirection(), state);
			}
		}
	}
}